apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

version = ext.libraryVersion

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

def _user = System.getenv("BINTRAY_USER")
def _key = System.getenv("BINTRAY_API_KEY")
def _passphrase = System.getenv("BINTRAY_PASSPHRASE")

if (project.rootProject.file('local.properties').exists() && (_user == null || _user.isEmpty())) {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    _user = properties.getProperty("bintray.user")
    _key = properties.getProperty("bintray.apikey");
    _passphrase = properties.getProperty("bintray.gpg.password")
}

def pomConfig = {
    licenses {
        license {
            name licenseName
            url licenseUrl
        }
    }
    developers {
        developer {
            id developerId
            name developerName
            email developerEmail
        }
    }
    scm {
        connection gitUrl
        developerConnection gitUrl
        url siteUrl
    }
}

publishing.publications {
    core(MavenPublication) {
        groupId project.ext.publishedGroupId
        artifactId = project.ext.artifact
        version project.ext.libraryVersion

        artifact "$buildDir/outputs/aar/${project.ext.artifact}-${version}-release.aar"
        artifact sourcesJar
        artifact javadocJar

        // adds pom data
        pom.withXml {
            asNode().appendNode('name', libraryName)
            asNode().appendNode('description', 'A MVP library for Android')
            asNode().appendNode('url', siteUrl)

            // creating additional node for dependencies
            def dependenciesNode = asNode().appendNode('dependencies')

            // defining configuration names from which dependencies will be taken (debugCompile or releaseCompile and compile)
            def configurationNames = ["releaseImplementation", "api"]

            configurationNames.each { configurationName ->
                // iterates over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations[configurationName].allDependencies.each {
                    if (it.group != null && it.group != '' && it.group != 'unspecified'
                            && it.name != null && it.name != '' && it.name != 'unspecified' && it.version != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)

                        //If there are any exclusions in dependency
                        if (it.excludeRules.size() > 0) {
                            def exclusionsNode = dependencyNode.appendNode('exclusions')
                            it.excludeRules.each { rule ->
                                def exclusionNode = exclusionsNode.appendNode('exclusion')
                                exclusionNode.appendNode('groupId', rule.group)
                                exclusionNode.appendNode('artifactId', rule.module)
                            }
                        }
                    }
                }
            }
            asNode().children().last() + pomConfig
        }
    }
}

// Bintray

bintray {
    user = _user
    key = _key
    publications = ["core"]

    //archivesBaseName = artifact
    override = true
    //configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        userOrg = orgName
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        labels = bintrayLabels
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = _passphrase
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}