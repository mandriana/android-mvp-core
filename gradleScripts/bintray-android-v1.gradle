apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

version = libraryVersion

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// Pom configuration to append
def pomConfig = {
    licenses {
        license {
            name licenseName
            url licenseUrl
        }
    }
    developers {
        developer {
            id developerId
            name developerName
            email developerEmail
        }
    }
    scm {
        connection gitUrl
        developerConnection gitUrl
        url siteUrl
    }
}

// We define here our publication tasks and a local repository.
publishing {
    publications {
        "${publicationName}"(MavenPublication) {
            groupId publishedGroupId
            artifactId = artifact
            version libraryVersion

            artifact "$buildDir/outputs/aar/" + getAarFileNameForVariant(artifact, version, 'release')
            artifact sourcesJar
            artifact javadocJar

            // adds pom data
            pom.withXml {
                asNode().appendNode('name', libraryName)
                asNode().appendNode('description', libraryDescription)
                asNode().appendNode('url', siteUrl)

                // creating additional node for dependencies
                def dependenciesNode = asNode().appendNode('dependencies')

                // defining configuration names from which dependencies will be taken (implementation or api)
                def configurationNames = ["implementation", "api"]

                configurationNames.each { configurationName ->
                    // iterates over the dependencies (we don't want the test ones), adding a <dependency> node for each
                    configurations[configurationName].dependencies.each {Dependency dep ->
                        if (dep.group != null && dep.group != '' && dep.group != 'unspecified'
                                && dep.name != null && dep.name != '' && dep.name != 'unspecified'
                                && dep.version != 'unspecified') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', dep.group)
                            dependencyNode.appendNode('artifactId', dep.name)
                            dependencyNode.appendNode('version', dep.version)
                            if (configurationName == 'api') {
                                dependencyNode.appendNode('scope', 'compile')
                            } else if(configurationName == 'implementation') {
                                dependencyNode.appendNode('scope', 'runtime')
                            }

                            if (!dep.transitive) {
                                // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                                final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                                exclusionNode.appendNode('groupId', '*')
                                exclusionNode.appendNode('artifactId', '*')
                            } else if (!dep.properties.excludeRules.empty) {
                                //If there are any exclusions in dependency
                                def exclusionsNode = dependencyNode.appendNode('exclusions')
                                dep.properties.excludeRules.each { ExcludeRule rule ->
                                    def exclusionNode = exclusionsNode.appendNode('exclusion')
                                    exclusionNode.appendNode('groupId', rule.group ?: '*')
                                    exclusionNode.appendNode('artifactId', rule.module ?: '*')
                                }
                            }
                        }
                    }
                }
                asNode().children().last() + pomConfig
            }
        }
    }
    repositories {
        maven {
            name = 'Local'
            url rootProject.file('repo/')
        }
    }
}

// Publish locally
task publishLocal {
    //dependsOn ":${project.name}:clean"
    dependsOn ":${project.name}:assemble"
    dependsOn ":${project.name}:publish"
}

// Bintray credentials
def _user = System.getenv("BINTRAY_USER")
def _key = System.getenv("BINTRAY_API_KEY")
def _passphrase = System.getenv("BINTRAY_PASSPHRASE")

if (project.rootProject.file('local.properties').exists() && (_user == null || _user.isEmpty())) {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    _user = properties.getProperty("bintray.user")
    _key = properties.getProperty("bintray.apikey")
    _passphrase = properties.getProperty("bintray.gpg.password")
}

// Bintray dependencies and configuration
bintrayUpload.dependsOn assemble
bintrayUpload.dependsOn sourcesJar
bintrayUpload.dependsOn javadocJar

bintray {
    user = _user
    key = _key
    publications = ["${publicationName}"]
    override = true
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        userOrg = orgName
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        labels = bintrayLabels
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = _passphrase
                //Optional. The passphrase for GPG signing'
            }
            released = new Date()
        }
    }
}