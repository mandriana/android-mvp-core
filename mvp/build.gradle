apply plugin: 'com.android.library'

ext {
    bintrayRepo = 'maven'
    bintrayName = 'mvp-core-rx2'
    orgName = 'michaelandria'

    publishedGroupId = 'com.github.mandriana'
    libraryName = 'MVPCore'
    artifact = 'mvp-core-rx2'
    libraryVersion = '2.0.0'

    libraryDescription = 'A library to set up a mvp architecture on Android'

    siteUrl = 'https://github.com/mandriana/android-mvp-core'
    gitUrl = 'https://github.com/mandriana/android-mvp-core.git'

    developerId = 'michaelandria'
    developerName = 'michaelandria'
    developerEmail = 'mika.andria@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]

    bintrayLabels = ['aar', 'android', 'architecture', 'MVP']
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName project.ext.libraryVersion
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles 'proguard-rules.pro'
            consumerProguardFiles 'proguard-consumer.pro'
        }
    }
    defineOutputForAars(libraryVariants)
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    api "androidx.annotation:annotation:$rootProject.ext.supportLibraryVersion"

    // Rx
    api "io.reactivex.rxjava2:rxandroid:$rootProject.ext.rx2AndroidVersion"
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    api "io.reactivex.rxjava2:rxjava:$rootProject.ext.rxjava2"

    testImplementation 'junit:junit:4.12'
}

def getAarFileNameForVariant(variant) {
    "${project.ext.artifact}-${version}-${variant.buildType.name}.aar"
}

def defineOutputForAars(libraryVariants) {
    libraryVariants.all { variant ->
        variant.outputs.all { output ->
            if (outputFileName != null && outputFileName.endsWith('.aar')) {
                def fileName = getAarFileNameForVariant(variant)
                outputFileName = new File(fileName)
            }
        }
    }
}

apply from: rootProject.file('gradleScripts/install-v1.gradle')
apply from: rootProject.file('gradleScripts/bintray-android-v1.gradle')